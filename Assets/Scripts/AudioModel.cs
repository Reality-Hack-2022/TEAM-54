using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class AudioModel
{
    [RealtimeProperty(1, true, false)]
    private int _audioClipIndex;
    [RealtimeProperty(2, true, false)]
    private Vector3 _worldPosition;
    [RealtimeProperty(3, true, true)]
    private int _increment;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class AudioModel : RealtimeModel {
    public int audioClipIndex {
        get {
            return _audioClipIndexProperty.value;
        }
        set {
            if (_audioClipIndexProperty.value == value) return;
            _audioClipIndexProperty.value = value;
            InvalidateReliableLength();
        }
    }
    
    public UnityEngine.Vector3 worldPosition {
        get {
            return _worldPositionProperty.value;
        }
        set {
            if (_worldPositionProperty.value == value) return;
            _worldPositionProperty.value = value;
            InvalidateReliableLength();
        }
    }
    
    public int increment {
        get {
            return _incrementProperty.value;
        }
        set {
            if (_incrementProperty.value == value) return;
            _incrementProperty.value = value;
            InvalidateReliableLength();
            FireIncrementDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(AudioModel model, T value);
    public event PropertyChangedHandler<int> incrementDidChange;
    
    public enum PropertyID : uint {
        AudioClipIndex = 1,
        WorldPosition = 2,
        Increment = 3,
    }
    
    #region Properties
    
    private ReliableProperty<int> _audioClipIndexProperty;
    
    private ReliableProperty<UnityEngine.Vector3> _worldPositionProperty;
    
    private ReliableProperty<int> _incrementProperty;
    
    #endregion
    
    public AudioModel() : base(null) {
        _audioClipIndexProperty = new ReliableProperty<int>(1, _audioClipIndex);
        _worldPositionProperty = new ReliableProperty<UnityEngine.Vector3>(2, _worldPosition);
        _incrementProperty = new ReliableProperty<int>(3, _increment);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _audioClipIndexProperty.UnsubscribeCallback();
        _worldPositionProperty.UnsubscribeCallback();
        _incrementProperty.UnsubscribeCallback();
    }
    
    private void FireIncrementDidChange(int value) {
        try {
            incrementDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _audioClipIndexProperty.WriteLength(context);
        length += _worldPositionProperty.WriteLength(context);
        length += _incrementProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _audioClipIndexProperty.Write(stream, context);
        writes |= _worldPositionProperty.Write(stream, context);
        writes |= _incrementProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.AudioClipIndex: {
                    changed = _audioClipIndexProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.WorldPosition: {
                    changed = _worldPositionProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.Increment: {
                    changed = _incrementProperty.Read(stream, context);
                    if (changed) FireIncrementDidChange(increment);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _audioClipIndex = audioClipIndex;
        _worldPosition = worldPosition;
        _increment = increment;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
